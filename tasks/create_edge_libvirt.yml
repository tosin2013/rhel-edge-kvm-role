- name: Check For ISO location
  ansible.builtin.stat:
    path: "{{ template_dir }}/{{ libvirt_iso_name }}"
  register: iso_temp_location
  tags: create_kvm_vm

- name: Copy ISO to libvirt image directory
  ansible.builtin.copy:
    src: "{{ template_dir }}/{{ libvirt_iso_name }}"
    dest: "{{ libvirt_image_dir }}/{{ libvirt_iso_name }}"
    remote_src: true
  when: iso_temp_location.stat.exists
  become: true
  become_user: root
  tags: create_kvm_vm

- name: Set instance_uuid variable
  ansible.builtin.set_fact:
    instance_uuid: "{{ instance.uuid | default(99999999 | random | to_uuid) }}"
  tags: create_kvm_vm

- name: Create disk
  ansible.builtin.stat:
    path: "{{ libvirt_image_dir }}/{{ instance.name }}.qcow2"
  register: disk_stat
  become: true
  become_user: root
  tags: create_kvm_vm

- name: Create disk if necessary
  ansible.builtin.command: >
    qemu-img create -f qcow2 {{ libvirt_image_dir }}/{{ instance.name }}.qcow2 {{ instance.disk_size }}
  when: not disk_stat.stat.exists or disk_stat.stat.size != instance.disk_size
  register: create_disk
  become: true
  become_user: root
  tags: create_kvm_vm

- name: Define virtual machine
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', 'rhel-edge-libvirt-vm-config.xml.j2') }}"
    uri: "{{ qemu_session }}"
  become: true
  become_user: root
  tags: create_kvm_vm

- name: Create virtual machine
  community.libvirt.virt:
    command: create
    name: "{{ instance.name }}"
    xml: "{{ lookup('template', 'rhel-edge-libvirt-vm-config.xml.j2') }}"
    state: running
    autostart: true
    uri: "{{ qemu_session }}"
  register: create_kvm_vm
  become: true
  become_user: root
  tags: create_kvm_vm

- name: Get virtual machine info
  community.libvirt.virt:
    command: info
    name: "{{ instance.name }}"
    uri: "{{ qemu_session }}"
  register: virt_info_cmd
  become: true
  become_user: root
  retries: 60
  delay: 60
  until: not virt_info_cmd.failed and virt_info_cmd[instance.name].state == "shutdown"
  tags: create_kvm_vm

- name: Start VM
  community.libvirt.virt:
    name: "{{ instance.name }}"
    state: running
    uri: "{{ qemu_session }}"
  tags: create_kvm_vm

# arp -n | grep {{ instance.mac }} | awk '{print $1}'
- name: Wait to get virtual machine IPs locally
  ansible.builtin.shell: |
    set -o pipefail
    nmap -sP {{ instance.subnet }} | grep  -B2  {{ instance.bridge_mac|upper }}  | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'|| arp -an  | grep {{ instance.bridge_mac |lower }} | awk '{print $2}' | sed '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
  register: vm_ips
  become: true
  become_user: root
  with_items: "{{ virtual_machines }}"
  changed_when: false
  failed_when: not vm_ips.stdout | regex_search('[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
  retries: 50
  delay: 30
  until: vm_ips is not failed
  # delegate_to: 127.0.0.1
  tags: create_kvm_vm


- name: Print return information from the previous task
  ansible.builtin.debug:
    var: vm_ips.results.0.stdout
  tags: create_kvm_vm

- name: Wait (up to 20 min) for virtual machines SSH to be reachable
  ansible.builtin.wait_for:
    host: "{{ vm_ips.results.0.stdout }}"
    port: 22
    state: started
    timeout: 1200
  register: ssh_check
  # delegate_to: 127.0.0.1
  tags: create_kvm_vm
